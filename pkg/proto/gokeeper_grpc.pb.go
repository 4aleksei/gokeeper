// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: gokeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeeperService_LoginUser_FullMethodName    = "/grpcgokeeper.KeeperService/LoginUser"
	KeeperService_RegisterUser_FullMethodName = "/grpcgokeeper.KeeperService/RegisterUser"
	KeeperService_AddData_FullMethodName      = "/grpcgokeeper.KeeperService/AddData"
	KeeperService_GetData_FullMethodName      = "/grpcgokeeper.KeeperService/GetData"
	KeeperService_UploadData_FullMethodName   = "/grpcgokeeper.KeeperService/UploadData"
	KeeperService_DownloadData_FullMethodName = "/grpcgokeeper.KeeperService/DownloadData"
)

// KeeperServiceClient is the client API for KeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperServiceClient interface {
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RegisterUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	AddData(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*ResponseAddData, error)
	GetData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*UserData, error)
	UploadData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataChunk, ResponseAddData], error)
	DownloadData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error)
}

type keeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperServiceClient(cc grpc.ClientConnInterface) KeeperServiceClient {
	return &keeperServiceClient{cc}
}

func (c *keeperServiceClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, KeeperService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceClient) RegisterUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, KeeperService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceClient) AddData(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*ResponseAddData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseAddData)
	err := c.cc.Invoke(ctx, KeeperService_AddData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceClient) GetData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, KeeperService_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceClient) UploadData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DataChunk, ResponseAddData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KeeperService_ServiceDesc.Streams[0], KeeperService_UploadData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataChunk, ResponseAddData]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperService_UploadDataClient = grpc.ClientStreamingClient[DataChunk, ResponseAddData]

func (c *keeperServiceClient) DownloadData(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KeeperService_ServiceDesc.Streams[1], KeeperService_DownloadData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, DataChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperService_DownloadDataClient = grpc.ServerStreamingClient[DataChunk]

// KeeperServiceServer is the server API for KeeperService service.
// All implementations must embed UnimplementedKeeperServiceServer
// for forward compatibility.
type KeeperServiceServer interface {
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	RegisterUser(context.Context, *LoginRequest) (*LoginResponse, error)
	AddData(context.Context, *UserData) (*ResponseAddData, error)
	GetData(context.Context, *DownloadRequest) (*UserData, error)
	UploadData(grpc.ClientStreamingServer[DataChunk, ResponseAddData]) error
	DownloadData(*DownloadRequest, grpc.ServerStreamingServer[DataChunk]) error
	mustEmbedUnimplementedKeeperServiceServer()
}

// UnimplementedKeeperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeeperServiceServer struct{}

func (UnimplementedKeeperServiceServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedKeeperServiceServer) RegisterUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedKeeperServiceServer) AddData(context.Context, *UserData) (*ResponseAddData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddData not implemented")
}
func (UnimplementedKeeperServiceServer) GetData(context.Context, *DownloadRequest) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedKeeperServiceServer) UploadData(grpc.ClientStreamingServer[DataChunk, ResponseAddData]) error {
	return status.Errorf(codes.Unimplemented, "method UploadData not implemented")
}
func (UnimplementedKeeperServiceServer) DownloadData(*DownloadRequest, grpc.ServerStreamingServer[DataChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadData not implemented")
}
func (UnimplementedKeeperServiceServer) mustEmbedUnimplementedKeeperServiceServer() {}
func (UnimplementedKeeperServiceServer) testEmbeddedByValue()                       {}

// UnsafeKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServiceServer will
// result in compilation errors.
type UnsafeKeeperServiceServer interface {
	mustEmbedUnimplementedKeeperServiceServer()
}

func RegisterKeeperServiceServer(s grpc.ServiceRegistrar, srv KeeperServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeeperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeeperService_ServiceDesc, srv)
}

func _KeeperService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceServer).RegisterUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperService_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperService_AddData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceServer).AddData(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperService_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceServer).GetData(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperService_UploadData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeeperServiceServer).UploadData(&grpc.GenericServerStream[DataChunk, ResponseAddData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperService_UploadDataServer = grpc.ClientStreamingServer[DataChunk, ResponseAddData]

func _KeeperService_DownloadData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeeperServiceServer).DownloadData(m, &grpc.GenericServerStream[DownloadRequest, DataChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperService_DownloadDataServer = grpc.ServerStreamingServer[DataChunk]

// KeeperService_ServiceDesc is the grpc.ServiceDesc for KeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcgokeeper.KeeperService",
	HandlerType: (*KeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _KeeperService_LoginUser_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _KeeperService_RegisterUser_Handler,
		},
		{
			MethodName: "AddData",
			Handler:    _KeeperService_AddData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _KeeperService_GetData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadData",
			Handler:       _KeeperService_UploadData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadData",
			Handler:       _KeeperService_DownloadData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gokeeper.proto",
}
